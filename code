from textblob import TextBlob
import sys,tweepy
import matplotlib.pyplot as plt

from tkinter import *
from PIL import Image,ImageTk

root = Tk()


def percentage(part, whole):
    temp = 100 * float(part) / float(whole)
    return format(temp, '.2f')

def plotPieChart(positive, wpositive, spositive, negative, wnegative, snegative, neutral, searchTerm, noOfSearchTerms):
    labels = ['Positive [' + str(positive) + '%]', 'Weakly Positive [' + str(wpositive) + '%]',
              'Strongly Positive [' + str(spositive) + '%]', 'Neutral [' + str(neutral) + '%]',
              'Negative [' + str(negative) + '%]', 'Weakly Negative [' + str(wnegative) + '%]',
              'Strongly Negative [' + str(snegative) + '%]']
    sizes = [positive, wpositive, spositive, neutral, negative, wnegative, snegative]
    colors = ['yellowgreen', 'lightgreen', 'darkgreen', 'gold', 'red', 'lightsalmon', 'darkred']
    normalize = False
    patches, texts = plt.pie(sizes, colors=colors, startangle=90)

    plt.legend(patches, labels, loc="best")
    plt.title('How people are reacting on ' + searchTerm + ' by analyzing ' + str(noOfSearchTerms) + ' Tweets.')
    plt.axis('equal')
    plt.tight_layout()
    plt.show()

def sentiment_Analyser():
    consumerKey = "O5wz2BwLOP7D2XHkDQLBtL8Cu"
    consumerSecret = "3GsHBR23Y4kta2csTljp9vECRw6jAnAIMQLINRnGqvrRJnp56v"
    accessToken = "1147558234560946176-v0bixkm2N7ZviFcQvPYsGlfOIccsdN"
    accessTokenSecret = "QT3VrA6rM0OBtar5Rm5Bn4qeplDxu1gKp8iRwOSY5YcVx"


    auth = tweepy.OAuthHandler(consumerKey, consumerSecret)
    auth.set_access_token(accessToken, accessTokenSecret)
    api = tweepy.API(auth)

    # input for term to be searched and how many tweets to search
    searchTerm = word_value.get()
    NoOfTerms = numberoftweets_value.get()

    # searching for tweets
    tweets = tweepy.Cursor(api.search, q=searchTerm, lang="en").items(NoOfTerms)

    # creating some variables to store info
    polarity = 0
    positive = 0
    wpositive = 0
    spositive = 0
    negative = 0
    wnegative = 0
    snegative = 0
    neutral = 0

    for tweet in tweets:
        analysis = TextBlob(tweet.text)
        polarity += analysis.sentiment.polarity  # adding up polarities to find the average later
        if (analysis.sentiment.polarity == 0):  # adding reaction of how people are reacting to find average later
            neutral += 1
        elif (analysis.sentiment.polarity > 0 and analysis.sentiment.polarity <= 0.3):
            wpositive += 1
        elif (analysis.sentiment.polarity > 0.3 and analysis.sentiment.polarity <= 0.6):
            positive += 1
        elif (analysis.sentiment.polarity > 0.6 and analysis.sentiment.polarity <= 1):
            spositive += 1
        elif (analysis.sentiment.polarity > -0.3 and analysis.sentiment.polarity <= 0):
            wnegative += 1
        elif (analysis.sentiment.polarity > -0.6 and analysis.sentiment.polarity <= -0.3):
            negative += 1
        elif (analysis.sentiment.polarity > -1 and analysis.sentiment.polarity <= -0.6):
            snegative += 1

    positive = percentage(positive, NoOfTerms)
    wpositive = percentage(wpositive, NoOfTerms)
    spositive = percentage(spositive, NoOfTerms)
    negative = percentage(negative, NoOfTerms)
    wnegative = percentage(wnegative, NoOfTerms)
    snegative = percentage(snegative, NoOfTerms)
    neutral = percentage(neutral, NoOfTerms)


    # finding average reaction
    polarity = polarity / NoOfTerms
    # print(polarity)

    # printing out data
    print("How people are reacting on " + searchTerm + " by analyzing " + str(NoOfTerms) + " tweets.")
    print()
    print("General Report: ")

    if (polarity == 0):
        print("Neutral")
    elif (polarity > 0 and polarity <= 0.3):
        print("Weakly Positive")
    elif (polarity > 0.3 and polarity <= 0.6):
        print("Positive")
    elif (polarity > 0.6 and polarity <= 1):
        print("Strongly Positive")
    elif (polarity > -0.3 and polarity <= 0):
        print("Weakly Negative")
    elif (polarity > -0.6 and polarity <= -0.3):
        print("Negative")
    elif (polarity > -1 and polarity <= -0.6):
        print("Strongly Negative")

    print()
    print("Detailed Report: ")
    print(str(positive) + "% people thought it was positive")
    print(str(wpositive) + "% people thought it was weakly positive")
    print(str(spositive) + "% people thought it was strongly positive")
    print(str(negative) + "% people thought it was negative")
    print(str(wnegative) + "% people thought it was weakly negative")
    print(str(snegative) + "% people thought it was strongly negative")
    print(str(neutral) + "% people thought it was neutral")

    plotPieChart(positive, wpositive, spositive, negative, wnegative, snegative, neutral, searchTerm, NoOfTerms)



root.title("Twitter Sentiment Analyser")
root.geometry("644x344")

#Heading
Label(root, text="WELCOME...", font="comicsansms 13 bold", pady=15).grid(row=0, column=4)

#Text for our form
word = Label(root, text="Enter keyword/word: ")
numberoftweets = Label(root, text="Enter no. of tweets: ")


#Pack text for our form
word.grid(row=1, column=2)
numberoftweets.grid(row=2, column=2)

# Tkinter variable for storing entries
word_value = StringVar()
numberoftweets_value = IntVar()

#Entries for our form
word_entry = Entry(root, textvariable=word_value)
numberoftweets_entry = Entry(root, textvariable=numberoftweets_value)


# Packing the Entries
word_entry.grid(row=1, column=3)
numberoftweets_entry.grid(row=2, column=3)

#Button & packing it and assigning it a command
Button(fg="AntiqueWhite", text="Check results!",bg="#000000",command=sentiment_Analyser).grid(row=15, column=3)
Button(fg="AntiqueWhite", text="Exit",bg="#000000",command=root.destroy).grid(row=15, column=4)


root.mainloop()
